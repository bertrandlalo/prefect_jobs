import datetime
import logging

from prefect import Flow

from iguazu.cache_validators import ParametrizedValidator
from iguazu.flows.datasets import generic_dataset_flow
from iguazu.recipes import inherit_params, register_flow
from iguazu.tasks.behavior import SpaceStressParticipantActions, SpaceStressSpawnsStimulations, SpaceStressScores
from iguazu.tasks.common import MergeFilesFromGroups
from iguazu.tasks.handlers import garbage_collect_handler, logging_handler

logger = logging.getLogger(__name__)


@register_flow('behavior_features')
@inherit_params(generic_dataset_flow)
def behavior_features_flow(*, force=False, workspace_name=None, query=None, alt_query=None,
                           **kwargs) -> Flow:
    """Extract behavior features"""
    logger.debug('Creating behavior features flow')

    # Manage parameters
    kwargs = kwargs.copy()
    # Propagate workspace name because we captured it on kwargs
    kwargs['workspace_name'] = workspace_name
    # Force required families: Quetzal workspace must have the following
    # families: (nb: None means "latest" version)
    required_families = dict(
        iguazu=None,
        omi=None,
    )
    families = kwargs.get('families', {}) or {}  # Could be None by default args
    for name in required_families:
        families.setdefault(name, required_families[name])
    kwargs['families'] = families
    # In case there was no query, set a default one
    default_query = """\
        SELECT
        id,
        filename
        FROM base
        LEFT JOIN iguazu USING (id)
        LEFT JOIN omi using (id)
        WHERE
            base.state = 'READY' AND                 -- no temporary files
            base.filename LIKE '%.hdf5' AND          -- only HDF5 files
            iguazu.behavior::json->>'status' IS NULL AND  -- files not fully processed by iguazu on this flow
            iguazu.parents is NULL                   -- files not generated by iguazu
        ORDER BY base.id                             -- always in the same order
    """
    # This secondary, alternative query is defined for the case when a new
    # quetzal workspace is created, and the iguazu.gsr metadata does not even
    # exist. We need to to do this because the iguazu.gsr column does not exist
    # and postgres does not permit querying a non-existent column
    default_alt_query = """\
        SELECT
        id,
        filename
        FROM base
        LEFT JOIN iguazu USING (id)
        WHERE
            base.state = 'READY' AND             -- no temporary files
            base.filename LIKE '%.hdf5'          -- only HDF5 files
            AND base.size < 10000000
        ORDER BY base.id                         -- always in the same order
    """
    kwargs['query'] = query or default_query
    kwargs['alt_query'] = alt_query or default_alt_query

    # Manage connections to other flows
    dataset_flow = generic_dataset_flow(**kwargs)
    events = dataset_flow.terminal_tasks().pop()

    # Instantiate tasks
    extract_participant_actions = SpaceStressParticipantActions(
        # Prefect task arguments
        state_handlers=[garbage_collect_handler, logging_handler],
        cache_for=datetime.timedelta(days=7),
        cache_validator=ParametrizedValidator(force=force),
    )
    extract_spawns_stimulations = SpaceStressSpawnsStimulations(
        # Prefect task arguments
        state_handlers=[garbage_collect_handler, logging_handler],
        cache_for=datetime.timedelta(days=7),
        cache_validator=ParametrizedValidator(force=force),
    )
    extract_scores = SpaceStressScores(
        # Prefect task arguments
        state_handlers=[garbage_collect_handler, logging_handler],
        cache_for=datetime.timedelta(days=7),
        cache_validator=ParametrizedValidator(force=force),
    )
    merge_subject = MergeFilesFromGroups(
        # Iguazu task constructor arguments
        suffix="_behavior",
        status_metadata_key='behavior',
        # Prefect task arguments
        state_handlers=[garbage_collect_handler, logging_handler],
        cache_for=datetime.timedelta(days=7),
        cache_validator=ParametrizedValidator(force=force),
    )
    # Flow definition
    with Flow('behavior-feature-extraction-flow') as flow:
        # Connect/extend this flow with the dataset flow
        flow.update(dataset_flow)

        # Behavior flow
        actions = extract_participant_actions.map(events=events)
        stimulations = extract_spawns_stimulations.map(events=events)
        scores = extract_scores.map(parent=events, stimulations=stimulations, actions=actions)

        subject_summary = merge_subject.map(parent=events,
                                            behavior_spacestress_actions=actions,
                                            behavior_spacestress_stimulations=stimulations,
                                            behavior_spacestress_scores=scores)
    return flow
